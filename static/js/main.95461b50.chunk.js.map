{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["subscription","waitButtonSubscription","observable","timer","App","waitRef","useRef","useState","timeInSeconds","setTimeInSeconds","timeString","setTimeString","timeElapsed","setTimeElapsed","waitWasClicked","setwaitWasClicked","useEffect","fromEvent","current","pipe","timeInterval","subscribe","i","console","log","interval","unsubscribe","Date","toISOString","substr","className","onClick","closed","undefined","t","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJAKIA,EACAC,E,wFAFEC,EAAaC,YAAM,EAAG,KA8EbC,MA3Ef,WACE,IAAMC,EAAUC,mBAChB,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KAsDA,OAnBAC,qBAAU,WAWR,OAVAf,EAAyBgB,YAAUZ,EAAQa,QAAS,aACjDC,KAAKC,eACLC,WAAU,SAACC,GACVC,QAAQC,IAAIF,EAAEG,UACVH,EAAEG,SAAW,MACfZ,EAAeL,GACfO,GAAkB,GAClBf,EAAa0B,kBAGZ,kBAAMzB,EAAuByB,iBACnC,CAAClB,IAIJQ,qBAAU,WACRL,EAAc,IAAIgB,KAAqB,IAAhBnB,GAAsBoB,cAAcC,OAAO,GAAI,MACrE,CAACrB,IAEF,sBAAKsB,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBpB,IACxB,wBAAQqB,QAtDY,WAAO,IAAD,GACZ,QAAZ,EAAA/B,SAAA,eAAcgC,cAA2BC,IAAjBjC,EAGxBA,EADEc,EACaZ,EAAWmB,WAAU,SAACa,GACnCzB,EAAiByB,EAAItB,MAGRV,EAAWmB,WAAU,SAACa,GACnCzB,EAAiByB,OAKrBnB,GAAkB,GAClBf,EAAa0B,cACbjB,EAAiB,KAsCiBqB,UAAU,QAA5C,wBAGA,wBAAQK,IAAK9B,EAASyB,UAAU,OAAhC,kBAGA,wBAAQC,QAtCO,WACjB/B,EAAa0B,cACbX,GAAkB,GAClBf,EAAeE,EAAWmB,WAAU,SAACa,GACnCzB,EAAiByB,OAkCYJ,UAAU,QAAvC,uBC/DSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.95461b50.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { timer, fromEvent } from \"rxjs\";\nimport { timeInterval } from \"rxjs/operators\";\nconst observable = timer(1, 1000);\nlet subscription;\nlet waitButtonSubscription;\nfunction App() {\n  const waitRef = useRef(); //reference for fromEvent operator\n  const [timeInSeconds, setTimeInSeconds] = useState(0);\n  const [timeString, setTimeString] = useState(\"\");\n  const [timeElapsed, setTimeElapsed] = useState(0); //time since 0 seconds\n  const [waitWasClicked, setwaitWasClicked] = useState(false);\n  //Stop/Start button func\n\n  const timerStart_Stop = () => {\n    if (subscription?.closed || subscription === undefined) {\n      //testing if no subscription/subscription is closed\n      if (waitWasClicked) {\n        subscription = observable.subscribe((t) => {\n          setTimeInSeconds(t + timeElapsed);\n        });\n      } else {\n        subscription = observable.subscribe((t) => {\n          setTimeInSeconds(t);\n        });\n      }\n    } else {\n      //if timer is on stop and set to 0\n      setwaitWasClicked(false);\n      subscription.unsubscribe();\n      setTimeInSeconds(0);\n    }\n  };\n\n  //reset button func\n\n  const timerReset = () => {\n    subscription.unsubscribe();\n    setwaitWasClicked(false);\n    subscription = observable.subscribe((t) => {\n      setTimeInSeconds(t);\n    });\n  };\n\n  //wait button func\n\n  useEffect(() => {\n    waitButtonSubscription = fromEvent(waitRef.current, \"mousedown\")\n      .pipe(timeInterval())\n      .subscribe((i) => {\n        console.log(i.interval);\n        if (i.interval < 300) {\n          setTimeElapsed(timeInSeconds);\n          setwaitWasClicked(true);\n          subscription.unsubscribe();\n        }\n      });\n    return () => waitButtonSubscription.unsubscribe();\n  }, [timeInSeconds]);\n\n  //Time string update\n\n  useEffect(() => {\n    setTimeString(new Date(timeInSeconds * 1000).toISOString().substr(11, 8));\n  }, [timeInSeconds]);\n  return (\n    <div className=\"App\">\n      <div className=\"clock\">{timeString}</div>\n      <button onClick={timerStart_Stop} className=\"start\">\n        Start/Stop\n      </button>\n      <button ref={waitRef} className=\"wait\">\n        Wait\n      </button>\n      <button onClick={timerReset} className=\"reset\">\n        Reset\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}